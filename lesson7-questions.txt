Questions for Lesson 7

1. What method do you put in the top of a controller so that something happens
before some or all of the controller actions execute?  Where can you put that
change so that it affects all controllers?

The method you put at the top of a controller to ensure something happens before
some or all controller actions is called a before_action. The before_action method
is a callback that runs before the specified actions are executed.


2. Consider the following statement:

bin/rails generate model subscription forum:references user:references priority:integer

This creates several files, including two you need to know about.  What are they?
After you do this statement but before starting the rails server, you have to do another
command.  What is that command?

This creates a migration file and a model file. The command you have to do is bin/rails db:migrate.



3. What table is created as a result of the migration described above? What are the column
names in that table? What is the primary key? What are the foreign keys?  What does a 
foreign key do?

The created table is the subscriptions table. It has these columns - id, forum_id, user_id, priority, created_at, updated_at.
The primary key is the id column. The foreign keys are forum_id and user_id. A foreign key is a column in a database that
creates a link between data in two tables.


4. You have the following lines in the Subscription model:

belongs_to :user
belongs_to :forum

Because of this, you have several additional methods added to the Subscription class.  This means
that if you have a @subscription (an instance of Subscription), you have a couple of methods
used to refer to associated database methods.  What are those methods?  (Actually there are a few,
but there are two in particular you should know.)

The two methods are user and forum.


5. You have the following lines in the User model.

has_many :subscriptions
has_many :posts
has_many :forums, through: :subscriptions

What are threee important methods that are available to instances of the user model because
of these lines?

The three important methods are subscription, posts, and forums.



6. Suppose that user is an instance of the User class. What kind of object is returned by
user.subcriptions?  Hint: To find out, go into the Rails console for your application.
Then do:

user=User.first
subscriptions = user.subscriptions
subscriptions.class

The second call returns what looks like an empty array -- but it isn't
of the Array class. This is important, because you can do, for 
example:

new_subscription = subscriptions.new

or

new_subscription = user.subscriptions.new

Try that last line.  You will see that it creates a subscription object, but that
object is not entirely empty.  Which attribute is set? Where does it get that
value?

A subscription object is returned. The attribute that is set is the user_id attribute. Its automatically
set because of its relationship defined in the User model.


7. Suppose that user is an instance of User, and forum is an instance of Forum.  What
Active Record Statement could you use to retrieve all the user's posts for that
forum?  Hint: You need to have a where in your statement. Try this out in the console.
You will see the SQL that is executed logged to the screen.  What is that SQL?

user_posts = Post.where(user_id: user.id, forum_id: forum.id)
SELECT "posts".* FROM "posts" WHERE "posts"."user_id" = ? AND "posts"."forum_id" = ?  [["user_id", 1], ["forum_id", 1]]

8. You have the following method in your posts controller:

  def destroy
    @forum = @post.forum
    @post.destroy
    redirect_to @forum, notice: "Your post was deleted."
  end

There is a security exposure, a risk that a hacker could do damage.  What is that
risk? What two things are done in your code to prevent the risk?

The risk is that its easy for someone to send a delete request directly to the controller, making it possible
for a user to potentially delete posts they don't own. Something that could be done to mitigate the risk is check to make sure
a user is logged in before being allowed to do certain actions. A follow up action is to also check if a logged in user is the owner
of a post.

9. The routes for subscriptions are nested under the forum routes.  How does this
change the routes?  What is the additional hash key and value that is passed in the
params hash to the subscriptions controller as a result of this nesting? Which routes
are unaffected by the nesting?

Since subscriptions are nested under forum routes, they will require the use of /forum routes to be accessed. For example
"forums/:forum_id/subscriptions". The additional hash key and value passed in the params hash is the forum_id (key) and the id
of the forum (value). Routes unaffected are ones



10. Every action method must do exactly one of two things -- that is, each
method may do all sorts of logic, but at the end, it has to do one of two
things, depending on the outcome of the logic.  What are those two things?

I think those two things are render or redirect.


